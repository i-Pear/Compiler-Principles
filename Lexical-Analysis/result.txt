<32, ->         => void
<1, I1>         => eraseEmpty
<48, ->         => (
<1, I2>         => Segment
<1, I3>         => s
<49, ->         => )
<42, ->         => {
<1, I4>         => check_final_state
<48, ->         => (
<1, I3>         => s
<45, ->         => .
<1, I5>         => end
<49, ->         => )
<38, ->         => ;
<19, ->         => int
<1, I6>         => outEmptyDegree
<40, ->         => [
<1, I7>         => edges
<45, ->         => .
<1, I8>         => size
<48, ->         => (
<49, ->         => )
<41, ->         => ]
<38, ->         => ;
<1, I9>         => memset
<48, ->         => (
<1, I6>         => outEmptyDegree
<44, ->         => ,
<2, C1>         => 0
<44, ->         => ,
<26, ->         => sizeof
<48, ->         => (
<1, I6>         => outEmptyDegree
<49, ->         => )
<49, ->         => )
<38, ->         => ;
<16, ->         => for
<48, ->         => (
<19, ->         => int
<1, I10>        => i
<74, ->         => =
<2, C1>         => 0
<38, ->         => ;
<1, I10>        => i
<70, ->         => <
<1, I7>         => edges
<45, ->         => .
<1, I8>         => size
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I10>        => i
<66, ->         => +
<66, ->         => +
<49, ->         => )
<42, ->         => {
<16, ->         => for
<48, ->         => (
<3, ->          => auto
<64, ->         => &
<1, I11>        => j
<39, ->         => :
<1, I7>         => edges
<40, ->         => [
<1, I10>        => i
<41, ->         => ]
<49, ->         => )
<42, ->         => {
<18, ->         => if
<48, ->         => (
<1, I11>        => j
<45, ->         => .
<1, I12>        => op
<74, ->         => =
<74, ->         => =
<2, C1>         => 0
<49, ->         => )
<42, ->         => {
<1, I6>         => outEmptyDegree
<40, ->         => [
<1, I10>        => i
<41, ->         => ]
<66, ->         => +
<66, ->         => +
<38, ->         => ;
<43, ->         => }
<43, ->         => }
<43, ->         => }
<1, I13>        => queue
<70, ->         => <
<19, ->         => int
<71, ->         => >
<1, I14>        => q
<38, ->         => ;
<16, ->         => for
<48, ->         => (
<19, ->         => int
<1, I10>        => i
<74, ->         => =
<2, C1>         => 0
<38, ->         => ;
<1, I10>        => i
<70, ->         => <
<1, I7>         => edges
<45, ->         => .
<1, I8>         => size
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I10>        => i
<66, ->         => +
<66, ->         => +
<49, ->         => )
<42, ->         => {
<18, ->         => if
<48, ->         => (
<1, I6>         => outEmptyDegree
<40, ->         => [
<1, I10>        => i
<41, ->         => ]
<74, ->         => =
<74, ->         => =
<2, C1>         => 0
<49, ->         => )
<42, ->         => {
<1, I14>        => q
<45, ->         => .
<1, I15>        => push
<48, ->         => (
<1, I10>        => i
<49, ->         => )
<38, ->         => ;
<43, ->         => }
<43, ->         => }
<34, ->         => while
<48, ->         => (
<72, ->         => !
<1, I14>        => q
<45, ->         => .
<1, I16>        => empty
<48, ->         => (
<49, ->         => )
<49, ->         => )
<42, ->         => {
<19, ->         => int
<1, I17>        => cnt
<74, ->         => =
<1, I14>        => q
<45, ->         => .
<1, I18>        => front
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I14>        => q
<45, ->         => .
<1, I19>        => pop
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<16, ->         => for
<48, ->         => (
<19, ->         => int
<1, I20>        => node
<74, ->         => =
<2, C1>         => 0
<38, ->         => ;
<1, I20>        => node
<70, ->         => <
<1, I7>         => edges
<45, ->         => .
<1, I8>         => size
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I20>        => node
<66, ->         => +
<66, ->         => +
<49, ->         => )
<42, ->         => {
<16, ->         => for
<48, ->         => (
<3, ->          => auto
<1, I10>        => i
<74, ->         => =
<1, I7>         => edges
<40, ->         => [
<1, I20>        => node
<41, ->         => ]
<45, ->         => .
<1, I21>        => begin
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I10>        => i
<72, ->         => !
<74, ->         => =
<1, I7>         => edges
<40, ->         => [
<1, I20>        => node
<41, ->         => ]
<45, ->         => .
<1, I5>         => end
<48, ->         => (
<49, ->         => )
<38, ->         => ;
<1, I10>        => i
<66, ->         => +
<66, ->         => +
<49, ->         => )
<42, ->         => {
<18, ->         => if
<48, ->         => (
<1, I10>        => i
<67, ->         => -
<71, ->         => >
<1, I12>        => op
<74, ->         => =
<74, ->         => =
<2, C1>         => 0
<64, ->         => &
<64, ->         => &
<1, I10>        => i
<67, ->         => -
<71, ->         => >
<1, I22>        => to
<74, ->         => =
<74, ->         => =
<1, I17>        => cnt
<49, ->         => )
<42, ->         => {
<16, ->         => for
<48, ->         => (
<3, ->          => auto
<64, ->         => &
<1, I23>        => e
<39, ->         => :
<1, I7>         => edges
<40, ->         => [
<1, I17>        => cnt
<41, ->         => ]
<49, ->         => )
<42, ->         => {
<1, I24>        => addEdge
<48, ->         => (
<1, I20>        => node
<44, ->         => ,
<1, I23>        => e
<45, ->         => .
<1, I22>        => to
<44, ->         => ,
<1, I23>        => e
<45, ->         => .
<1, I12>        => op
<49, ->         => )
<38, ->         => ;
<43, ->         => }
<3, ->          => auto
<1, I25>        => b
<74, ->         => =
<1, I10>        => i
<38, ->         => ;
<1, I10>        => i
<66, ->         => +
<66, ->         => +
<38, ->         => ;
<1, I7>         => edges
<40, ->         => [
<1, I20>        => node
<41, ->         => ]
<45, ->         => .
<1, I26>        => erase
<48, ->         => (
<1, I25>        => b
<49, ->         => )
<38, ->         => ;
<1, I10>        => i
<67, ->         => -
<67, ->         => -
<38, ->         => ;
<1, I6>         => outEmptyDegree
<40, ->         => [
<1, I20>        => node
<41, ->         => ]
<67, ->         => -
<67, ->         => -
<38, ->         => ;
<18, ->         => if
<48, ->         => (
<1, I6>         => outEmptyDegree
<40, ->         => [
<1, I20>        => node
<41, ->         => ]
<74, ->         => =
<74, ->         => =
<2, C1>         => 0
<49, ->         => )
<42, ->         => {
<1, I14>        => q
<45, ->         => .
<1, I15>        => push
<48, ->         => (
<1, I20>        => node
<49, ->         => )
<38, ->         => ;
<43, ->         => }
<43, ->         => }
<43, ->         => }
<43, ->         => }
<43, ->         => }
